---
- name: Synchronize the nova DB schema
  command: "{{ nova_bin }}/nova-manage db sync"
  become: yes
  become_user: "{{ nova_system_user_name }}"
  changed_when: false

- name: Create the cell mapping entry in the nova API DB
  command: >-
    {{ nova_bin }}/nova-manage cell_v2 create_cell
      --name {{ nova_cell_name }}
      --database_connection mysql+pymysql://{{ nova_cell_mysql_name }}:{{ nova_cell_mysql_password }}@{{ cell_vip_address }}/{{ nova_cell_database_name }}?charset=utf8
      --transport-url "rabbit://{% for host in groups[nova_cell_conductor_group] %}{{ oslomsg_openstack_user }}:{{ oslomsg_openstack_password }}@{{ hostvars[host]['ansible_' + hostvars[host]['api_interface']]['ipv4']['address'] }}:{{ rabbitmq_port }}{% if not loop.last %},{% endif %}{% endfor %}"
  become: yes
  become_user: "{{ nova_system_user_name }}"
  register: nova_cell_create
  # When upgrading, cell will already exist and nova-manage will
  # give a return code of 2, so we therefore know that if the
  # return code is:
  # 0: the cell mapping record in the nova API database was
  #    successfully implemented (greenfield install)
  # 2: the cell mapping record in the nova API database already
  #    exists (brownfield install)
  failed_when: "nova_cell_create.rc not in [0, 2]"
  changed_when: "nova_cell_create.rc == 0"
